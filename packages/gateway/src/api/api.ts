/* tslint:disable */
/* eslint-disable */
/**
 * Gateway interaction
 * Explore the functionality of an gateway
 *
 * The version of the OpenAPI document: 1.0.0 - f20cfc7657a97641
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Compression
 */
export interface Compression {
    /**
     * 
     * @type {CompressionType}
     * @memberof Compression
     */
    'type': CompressionType;
    /**
     * Json encoded information that are required for this kind of compression.
     * @type {string}
     * @memberof Compression
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum CompressionType {
    JSON = 'JSON',
    PROTO = 'PROTO'
}

/**
 * 
 * @export
 * @interface ControllerManage
 */
export interface ControllerManage {
    /**
     * id that should be added to the controller list.
     * @type {Array<string>}
     * @memberof ControllerManage
     */
    'add'?: Array<string>;
    /**
     * id that should be removed from the controller list.
     * @type {Array<string>}
     * @memberof ControllerManage
     */
    'remove'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateDidIdDto
 */
export interface CreateDidIdDto {
    /**
     * Identifier that belongs to the public key
     * @type {string}
     * @memberof CreateDidIdDto
     */
    'identifier': string;
    /**
     * Invite code that allows the creation of a certificate that includes the public key of the identifier.
     * @type {string}
     * @memberof CreateDidIdDto
     */
    'secret': string;
    /**
     * Value of the public key as a json web key.
     * @type {PublicKeyJwkDto}
     * @memberof CreateDidIdDto
     */
    'publicKey': PublicKeyJwkDto;
}
/**
 * 
 * @export
 * @interface DidHashStructure
 */
export interface DidHashStructure {
    /**
     * unique identifier of a did
     * @type {string}
     * @memberof DidHashStructure
     */
    'id': string;
    /**
     * Did that controls this did.
     * @type {ControllerManage}
     * @memberof DidHashStructure
     */
    'controller'?: ControllerManage;
    /**
     * Used algorithm for the hash.
     * @type {string}
     * @memberof DidHashStructure
     */
    'algorithm': string;
    /**
     * if set to a date it will revoke the hash
     * @type {string}
     * @memberof DidHashStructure
     */
    'revoked'?: string;
}
/**
 * 
 * @export
 * @interface DidIdStructure
 */
export interface DidIdStructure {
    /**
     * unique identifier of a did
     * @type {string}
     * @memberof DidIdStructure
     */
    'id': string;
    /**
     * Did that controls this did.
     * @type {ControllerManage}
     * @memberof DidIdStructure
     */
    'controller'?: ControllerManage;
    /**
     * 
     * @type {RoleManage}
     * @memberof DidIdStructure
     */
    'role'?: RoleManage;
    /**
     * 
     * @type {VerificationMethod}
     * @memberof DidIdStructure
     */
    'verificationMethod'?: VerificationMethod;
    /**
     * 
     * @type {ServiceMange}
     * @memberof DidIdStructure
     */
    'service'?: ServiceMange;
    /**
     * 
     * @type {VerificationRelationshipManage}
     * @memberof DidIdStructure
     */
    'authentication'?: VerificationRelationshipManage;
    /**
     * 
     * @type {VerificationRelationshipManage}
     * @memberof DidIdStructure
     */
    'assertionMethod'?: VerificationRelationshipManage;
    /**
     * 
     * @type {VerificationRelationshipManage}
     * @memberof DidIdStructure
     */
    'keyAgreement'?: VerificationRelationshipManage;
    /**
     * 
     * @type {VerificationRelationshipManage}
     * @memberof DidIdStructure
     */
    'modification'?: VerificationRelationshipManage;
}
/**
 * 
 * @export
 * @interface DidIdTransactionBody
 */
export interface DidIdTransactionBody {
    /**
     * Version number of the transaction.
     * @type {number}
     * @memberof DidIdTransactionBody
     */
    'version': number;
    /**
     * timestamp when transaction was created.
     * @type {string}
     * @memberof DidIdTransactionBody
     */
    'date': string;
    /**
     * 
     * @type {TransactionType}
     * @memberof DidIdTransactionBody
     */
    'type': TransactionType;
    /**
     * elements of the did document
     * @type {DidIdStructure}
     * @memberof DidIdTransactionBody
     */
    'value': DidIdStructure;
}
/**
 * 
 * @export
 * @interface DidIdTransactionDto
 */
export interface DidIdTransactionDto {
    /**
     * Version number of the base transaction.
     * @type {number}
     * @memberof DidIdTransactionDto
     */
    'version': number;
    /**
     * 
     * @type {DidIdTransactionBody}
     * @memberof DidIdTransactionDto
     */
    'body': DidIdTransactionBody;
    /**
     * 
     * @type {TransactionMetadata}
     * @memberof DidIdTransactionDto
     */
    'metadata': TransactionMetadata;
    /**
     * 
     * @type {SignatureInfo}
     * @memberof DidIdTransactionDto
     */
    'signature': SignatureInfo;
}
/**
 * 
 * @export
 * @interface DidPublicKey
 */
export interface DidPublicKey {
    /**
     * unique identifier of a key
     * @type {string}
     * @memberof DidPublicKey
     */
    'id': string;
    /**
     * controller of the key
     * @type {string}
     * @memberof DidPublicKey
     */
    'controller': string;
    /**
     * 
     * @type {DidPublicKeyType}
     * @memberof DidPublicKey
     */
    'type': DidPublicKeyType;
    /**
     * encoded key value
     * @type {PublicKeyJwkDto}
     * @memberof DidPublicKey
     */
    'publicKeyJwk': PublicKeyJwkDto;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum DidPublicKeyType {
    RsaVerificationKey2018 = 'RsaVerificationKey2018'
}

/**
 * 
 * @export
 * @interface DidResponse
 */
export interface DidResponse {
    /**
     * additional metadata to the transaction
     * @type {PersistedTransaction}
     * @memberof DidResponse
     */
    'metaData': PersistedTransaction;
    /**
     * 
     * @type {DidIdTransactionDto}
     * @memberof DidResponse
     */
    'transaction': DidIdTransactionDto;
}
/**
 * 
 * @export
 * @interface DidSchemaStructure
 */
export interface DidSchemaStructure {
    /**
     * unique identifier of a did
     * @type {string}
     * @memberof DidSchemaStructure
     */
    'id': string;
    /**
     * Did that controls this did.
     * @type {ControllerManage}
     * @memberof DidSchemaStructure
     */
    'controller'?: ControllerManage;
    /**
     * json schema to validate the data that should be parsed into the
     * @type {string}
     * @memberof DidSchemaStructure
     */
    'schema'?: string;
}
/**
 * 
 * @export
 * @interface DidService
 */
export interface DidService {
    /**
     * unique identifier of a service
     * @type {string}
     * @memberof DidService
     */
    'id': string;
    /**
     * name of the service
     * @type {string}
     * @memberof DidService
     */
    'type': string;
    /**
     * url to the service
     * @type {string}
     * @memberof DidService
     */
    'endpoint': string;
}
/**
 * 
 * @export
 * @interface DidTemplateStructure
 */
export interface DidTemplateStructure {
    /**
     * unique identifier of a template
     * @type {string}
     * @memberof DidTemplateStructure
     */
    'id': string;
    /**
     * Did that controls this did.
     * @type {ControllerManage}
     * @memberof DidTemplateStructure
     */
    'controller'?: ControllerManage;
    /**
     * template that should be used.
     * @type {string}
     * @memberof DidTemplateStructure
     */
    'template': string;
    /**
     * did of the schema the template is based on
     * @type {string}
     * @memberof DidTemplateStructure
     */
    'schemaId': string;
    /**
     * 
     * @type {Compression}
     * @memberof DidTemplateStructure
     */
    'compression': Compression;
}
/**
 * 
 * @export
 * @interface HashDidTransactionDto
 */
export interface HashDidTransactionDto {
    /**
     * Version number of the base transaction.
     * @type {number}
     * @memberof HashDidTransactionDto
     */
    'version': number;
    /**
     * 
     * @type {HashTransactionBody}
     * @memberof HashDidTransactionDto
     */
    'body': HashTransactionBody;
    /**
     * 
     * @type {TransactionMetadata}
     * @memberof HashDidTransactionDto
     */
    'metadata': TransactionMetadata;
    /**
     * 
     * @type {SignatureInfo}
     * @memberof HashDidTransactionDto
     */
    'signature': SignatureInfo;
}
/**
 * 
 * @export
 * @interface HashResponse
 */
export interface HashResponse {
    /**
     * additional metadata to the transaction
     * @type {PersistedTransaction}
     * @memberof HashResponse
     */
    'metaData': PersistedTransaction;
    /**
     * transaction that was persisted.
     * @type {HashDidTransactionDto}
     * @memberof HashResponse
     */
    'transaction': HashDidTransactionDto;
}
/**
 * 
 * @export
 * @interface HashTransactionBody
 */
export interface HashTransactionBody {
    /**
     * Version number of the transaction.
     * @type {number}
     * @memberof HashTransactionBody
     */
    'version': number;
    /**
     * timestamp when transaction was created.
     * @type {string}
     * @memberof HashTransactionBody
     */
    'date': string;
    /**
     * 
     * @type {TransactionType}
     * @memberof HashTransactionBody
     */
    'type': TransactionType;
    /**
     * elements of the did document
     * @type {DidHashStructure}
     * @memberof HashTransactionBody
     */
    'value': DidHashStructure;
}
/**
 * 
 * @export
 * @interface InviteNode
 */
export interface InviteNode {
    /**
     * id of the did
     * @type {string}
     * @memberof InviteNode
     */
    'id': string;
    /**
     * Secret token
     * @type {string}
     * @memberof InviteNode
     */
    'secret': string;
    /**
     * Url of the node endpoint
     * @type {string}
     * @memberof InviteNode
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface InviteRequest
 */
export interface InviteRequest {
    /**
     * Unique identifier that is used for the new did.
     * @type {string}
     * @memberof InviteRequest
     */
    'id'?: string;
    /**
     * Secret that is used for authentication
     * @type {string}
     * @memberof InviteRequest
     */
    'secret'?: string;
    /**
     * Unique identifier that will be stored to identify the did with a human readable name.
     * @type {string}
     * @memberof InviteRequest
     */
    'name': string;
    /**
     * Describes for what type of role in the network the secret is allowed to be used
     * @type {string}
     * @memberof InviteRequest
     */
    'role': InviteRequestRole;
    /**
     * If set to true a new secret will be set for an existing entry
     * @type {boolean}
     * @memberof InviteRequest
     */
    'force'?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum InviteRequestRole {
    Validator = 'Validator',
    Gateway = 'Gateway',
    Observer = 'Observer',
    Client = 'Client'
}

/**
 * 
 * @export
 * @interface PersistedBlock
 */
export interface PersistedBlock {
    /**
     * 
     * @type {number}
     * @memberof PersistedBlock
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PersistedBlock
     */
    'createdAt': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PersistedBlock
     */
    'validators': Array<string>;
}
/**
 * 
 * @export
 * @interface PersistedTransaction
 */
export interface PersistedTransaction {
    /**
     * 
     * @type {PersistedTransactionMetaData}
     * @memberof PersistedTransaction
     */
    'transaction': PersistedTransactionMetaData;
    /**
     * 
     * @type {PersistedBlock}
     * @memberof PersistedTransaction
     */
    'block': PersistedBlock;
}
/**
 * 
 * @export
 * @interface PersistedTransactionMetaData
 */
export interface PersistedTransactionMetaData {
    /**
     * 
     * @type {string}
     * @memberof PersistedTransactionMetaData
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof PersistedTransactionMetaData
     */
    'persisted': string;
}
/**
 * 
 * @export
 * @interface PublicKeyJwkDto
 */
export interface PublicKeyJwkDto {
    /**
     * How the key was meant to be used
     * @type {Array<string>}
     * @memberof PublicKeyJwkDto
     */
    'key_ops'?: Array<string>;
    /**
     * The family of cryptographic algorithms used with the key.
     * @type {string}
     * @memberof PublicKeyJwkDto
     */
    'kty'?: string;
    /**
     * The modulus for the RSA public key.
     * @type {string}
     * @memberof PublicKeyJwkDto
     */
    'n'?: string;
    /**
     * The exponent for the RSA public key.
     * @type {string}
     * @memberof PublicKeyJwkDto
     */
    'e'?: string;
    /**
     * The specific cryptographic algorithm used with the key.
     * @type {string}
     * @memberof PublicKeyJwkDto
     */
    'alg'?: string;
}
/**
 * 
 * @export
 * @interface RoleManage
 */
export interface RoleManage {
    /**
     * roles that should be added to the did
     * @type {Array<RoleManageType>}
     * @memberof RoleManage
     */
    'add'?: Array<RoleManageType>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoleManage
     */
    'remove'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum RoleManageType {
    Validator = 'Validator',
    Gateway = 'Gateway',
    Observer = 'Observer',
    Client = 'Client'
}

/**
 * 
 * @export
 * @interface SchemaResponse
 */
export interface SchemaResponse {
    /**
     * additional metadata to the transaction
     * @type {PersistedTransaction}
     * @memberof SchemaResponse
     */
    'metaData': PersistedTransaction;
    /**
     * transaction that was persisted.
     * @type {SchemaTransactionDto}
     * @memberof SchemaResponse
     */
    'transaction': SchemaTransactionDto;
}
/**
 * 
 * @export
 * @interface SchemaTransactionBody
 */
export interface SchemaTransactionBody {
    /**
     * Version number of the transaction.
     * @type {number}
     * @memberof SchemaTransactionBody
     */
    'version': number;
    /**
     * timestamp when transaction was created.
     * @type {string}
     * @memberof SchemaTransactionBody
     */
    'date': string;
    /**
     * 
     * @type {TransactionType}
     * @memberof SchemaTransactionBody
     */
    'type': TransactionType;
    /**
     * 
     * @type {DidSchemaStructure}
     * @memberof SchemaTransactionBody
     */
    'value': DidSchemaStructure;
}
/**
 * 
 * @export
 * @interface SchemaTransactionDto
 */
export interface SchemaTransactionDto {
    /**
     * Version number of the base transaction.
     * @type {number}
     * @memberof SchemaTransactionDto
     */
    'version': number;
    /**
     * 
     * @type {SchemaTransactionBody}
     * @memberof SchemaTransactionDto
     */
    'body': SchemaTransactionBody;
    /**
     * 
     * @type {TransactionMetadata}
     * @memberof SchemaTransactionDto
     */
    'metadata': TransactionMetadata;
    /**
     * 
     * @type {SignatureInfo}
     * @memberof SchemaTransactionDto
     */
    'signature': SignatureInfo;
}
/**
 * 
 * @export
 * @interface ServiceMange
 */
export interface ServiceMange {
    /**
     * List of services that should be added to the did document.
     * @type {Array<DidService>}
     * @memberof ServiceMange
     */
    'add'?: Array<DidService>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceMange
     */
    'remove'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SignatureDto
 */
export interface SignatureDto {
    /**
     * Identifier of the issuer and the used key
     * @type {string}
     * @memberof SignatureDto
     */
    'identifier': string;
    /**
     * The actual signature as a hex encoded string.
     * @type {string}
     * @memberof SignatureDto
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface SignatureInfo
 */
export interface SignatureInfo {
    /**
     * 
     * @type {SignatureType}
     * @memberof SignatureInfo
     */
    'type': SignatureType;
    /**
     * signature of the document values
     * @type {Array<SignatureDto>}
     * @memberof SignatureInfo
     */
    'values': Array<SignatureDto>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum SignatureType {
    Single = 'Single',
    Multi = 'Multi'
}

/**
 * 
 * @export
 * @interface TemplateResponse
 */
export interface TemplateResponse {
    /**
     * additional metadata to the transaction
     * @type {PersistedTransaction}
     * @memberof TemplateResponse
     */
    'metaData': PersistedTransaction;
    /**
     * transaction that was persisted.
     * @type {TemplateTransactionDto}
     * @memberof TemplateResponse
     */
    'transaction': TemplateTransactionDto;
}
/**
 * 
 * @export
 * @interface TemplateTransactionBody
 */
export interface TemplateTransactionBody {
    /**
     * Version number of the transaction.
     * @type {number}
     * @memberof TemplateTransactionBody
     */
    'version': number;
    /**
     * timestamp when transaction was created.
     * @type {string}
     * @memberof TemplateTransactionBody
     */
    'date': string;
    /**
     * 
     * @type {TransactionType}
     * @memberof TemplateTransactionBody
     */
    'type': TransactionType;
    /**
     * 
     * @type {DidTemplateStructure}
     * @memberof TemplateTransactionBody
     */
    'value': DidTemplateStructure;
}
/**
 * 
 * @export
 * @interface TemplateTransactionDto
 */
export interface TemplateTransactionDto {
    /**
     * Version number of the base transaction.
     * @type {number}
     * @memberof TemplateTransactionDto
     */
    'version': number;
    /**
     * 
     * @type {TemplateTransactionBody}
     * @memberof TemplateTransactionDto
     */
    'body': TemplateTransactionBody;
    /**
     * 
     * @type {TransactionMetadata}
     * @memberof TemplateTransactionDto
     */
    'metadata': TransactionMetadata;
    /**
     * 
     * @type {SignatureInfo}
     * @memberof TemplateTransactionDto
     */
    'signature': SignatureInfo;
}
/**
 * 
 * @export
 * @interface TransactionMetadata
 */
export interface TransactionMetadata {
    /**
     * Version number of the metadata.
     * @type {number}
     * @memberof TransactionMetadata
     */
    'version': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum TransactionType {
    Hash = 'Hash',
    Did = 'Did',
    Schema = 'Schema',
    Template = 'Template'
}

/**
 * 
 * @export
 * @interface VerificationMethod
 */
export interface VerificationMethod {
    /**
     * List of public keys that should be added to the did document.
     * @type {Array<DidPublicKey>}
     * @memberof VerificationMethod
     */
    'add'?: Array<DidPublicKey>;
    /**
     * 
     * @type {Array<string>}
     * @memberof VerificationMethod
     */
    'remove'?: Array<string>;
}
/**
 * 
 * @export
 * @interface VerificationRelationshipManage
 */
export interface VerificationRelationshipManage {
    /**
     * id that should be removed from the list
     * @type {Array<string>}
     * @memberof VerificationRelationshipManage
     */
    'add'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof VerificationRelationshipManage
     */
    'remove'?: Array<string>;
}

/**
 * DefaultGatewayApi - axios parameter creator
 * @export
 */
export const DefaultGatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prometheusControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultGatewayApi - functional programming interface
 * @export
 */
export const DefaultGatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultGatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prometheusControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prometheusControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultGatewayApi - factory interface
 * @export
 */
export const DefaultGatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultGatewayApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prometheusControllerIndex(options?: any): AxiosPromise<void> {
            return localVarFp.prometheusControllerIndex(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultGatewayApi - object-oriented interface
 * @export
 * @class DefaultGatewayApi
 * @extends {BaseAPI}
 */
export class DefaultGatewayApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultGatewayApi
     */
    public prometheusControllerIndex(options?: AxiosRequestConfig) {
        return DefaultGatewayApiFp(this.configuration).prometheusControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DidGatewayApi - axios parameter creator
 * @export
 */
export const DidGatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Signs the public key of the Client.
         * @param {CreateDidIdDto} createDidIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayDidControllerCreate: async (createDidIdDto: CreateDidIdDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDidIdDto' is not null or undefined
            assertParamExists('gatewayDidControllerCreate', 'createDidIdDto', createDidIdDto)
            const localVarPath = `/did/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDidIdDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates an invite for a new Client
         * @param {InviteRequest} inviteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayDidControllerInvite: async (inviteRequest: InviteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteRequest' is not null or undefined
            assertParamExists('gatewayDidControllerInvite', 'inviteRequest', inviteRequest)
            const localVarPath = `/did/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resolves the name to a given did that was created by this node.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayDidControllerResolve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gatewayDidControllerResolve', 'id', id)
            const localVarPath = `/did/resolve/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds new did document to the chain.
         * @param {DidIdTransactionDto} didIdTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayDidControllerStore: async (didIdTransactionDto: DidIdTransactionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'didIdTransactionDto' is not null or undefined
            assertParamExists('gatewayDidControllerStore', 'didIdTransactionDto', didIdTransactionDto)
            const localVarPath = `/did`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(didIdTransactionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DidGatewayApi - functional programming interface
 * @export
 */
export const DidGatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DidGatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Signs the public key of the Client.
         * @param {CreateDidIdDto} createDidIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gatewayDidControllerCreate(createDidIdDto: CreateDidIdDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gatewayDidControllerCreate(createDidIdDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generates an invite for a new Client
         * @param {InviteRequest} inviteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gatewayDidControllerInvite(inviteRequest: InviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gatewayDidControllerInvite(inviteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resolves the name to a given did that was created by this node.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gatewayDidControllerResolve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gatewayDidControllerResolve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds new did document to the chain.
         * @param {DidIdTransactionDto} didIdTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gatewayDidControllerStore(didIdTransactionDto: DidIdTransactionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gatewayDidControllerStore(didIdTransactionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DidGatewayApi - factory interface
 * @export
 */
export const DidGatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DidGatewayApiFp(configuration)
    return {
        /**
         * 
         * @summary Signs the public key of the Client.
         * @param {CreateDidIdDto} createDidIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayDidControllerCreate(createDidIdDto: CreateDidIdDto, options?: any): AxiosPromise<DidResponse> {
            return localVarFp.gatewayDidControllerCreate(createDidIdDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generates an invite for a new Client
         * @param {InviteRequest} inviteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayDidControllerInvite(inviteRequest: InviteRequest, options?: any): AxiosPromise<InviteRequest> {
            return localVarFp.gatewayDidControllerInvite(inviteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resolves the name to a given did that was created by this node.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayDidControllerResolve(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.gatewayDidControllerResolve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds new did document to the chain.
         * @param {DidIdTransactionDto} didIdTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayDidControllerStore(didIdTransactionDto: DidIdTransactionDto, options?: any): AxiosPromise<void> {
            return localVarFp.gatewayDidControllerStore(didIdTransactionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DidGatewayApi - object-oriented interface
 * @export
 * @class DidGatewayApi
 * @extends {BaseAPI}
 */
export class DidGatewayApi extends BaseAPI {
    /**
     * 
     * @summary Signs the public key of the Client.
     * @param {CreateDidIdDto} createDidIdDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidGatewayApi
     */
    public gatewayDidControllerCreate(createDidIdDto: CreateDidIdDto, options?: AxiosRequestConfig) {
        return DidGatewayApiFp(this.configuration).gatewayDidControllerCreate(createDidIdDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generates an invite for a new Client
     * @param {InviteRequest} inviteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidGatewayApi
     */
    public gatewayDidControllerInvite(inviteRequest: InviteRequest, options?: AxiosRequestConfig) {
        return DidGatewayApiFp(this.configuration).gatewayDidControllerInvite(inviteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resolves the name to a given did that was created by this node.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidGatewayApi
     */
    public gatewayDidControllerResolve(id: string, options?: AxiosRequestConfig) {
        return DidGatewayApiFp(this.configuration).gatewayDidControllerResolve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds new did document to the chain.
     * @param {DidIdTransactionDto} didIdTransactionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidGatewayApi
     */
    public gatewayDidControllerStore(didIdTransactionDto: DidIdTransactionDto, options?: AxiosRequestConfig) {
        return DidGatewayApiFp(this.configuration).gatewayDidControllerStore(didIdTransactionDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HashGatewayApi - axios parameter creator
 * @export
 */
export const HashGatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds new hash to the chain.
         * @param {HashDidTransactionDto} hashDidTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayHashControllerCreate: async (hashDidTransactionDto: HashDidTransactionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hashDidTransactionDto' is not null or undefined
            assertParamExists('gatewayHashControllerCreate', 'hashDidTransactionDto', hashDidTransactionDto)
            const localVarPath = `/hash`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hashDidTransactionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HashGatewayApi - functional programming interface
 * @export
 */
export const HashGatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HashGatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Adds new hash to the chain.
         * @param {HashDidTransactionDto} hashDidTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gatewayHashControllerCreate(hashDidTransactionDto: HashDidTransactionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HashResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gatewayHashControllerCreate(hashDidTransactionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HashGatewayApi - factory interface
 * @export
 */
export const HashGatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HashGatewayApiFp(configuration)
    return {
        /**
         * 
         * @summary Adds new hash to the chain.
         * @param {HashDidTransactionDto} hashDidTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayHashControllerCreate(hashDidTransactionDto: HashDidTransactionDto, options?: any): AxiosPromise<HashResponse> {
            return localVarFp.gatewayHashControllerCreate(hashDidTransactionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HashGatewayApi - object-oriented interface
 * @export
 * @class HashGatewayApi
 * @extends {BaseAPI}
 */
export class HashGatewayApi extends BaseAPI {
    /**
     * 
     * @summary Adds new hash to the chain.
     * @param {HashDidTransactionDto} hashDidTransactionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashGatewayApi
     */
    public gatewayHashControllerCreate(hashDidTransactionDto: HashDidTransactionDto, options?: AxiosRequestConfig) {
        return HashGatewayApiFp(this.configuration).gatewayHashControllerCreate(hashDidTransactionDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NodeGatewayApi - axios parameter creator
 * @export
 */
export const NodeGatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the type of the node and the service that was exposed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpGatewayControllerInformation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pass an invite code to init this node.
         * @param {InviteNode} inviteNode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpGatewayControllerInit: async (inviteNode: InviteNode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteNode' is not null or undefined
            assertParamExists('httpGatewayControllerInit', 'inviteNode', inviteNode)
            const localVarPath = `/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteNode, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rebuilds the pki and hash database based on the local blockchain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpGatewayControllerRebuild: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rebuild`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resets the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpGatewayControllerReset: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeGatewayApi - functional programming interface
 * @export
 */
export const NodeGatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeGatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the type of the node and the service that was exposed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async httpGatewayControllerInformation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.httpGatewayControllerInformation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pass an invite code to init this node.
         * @param {InviteNode} inviteNode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async httpGatewayControllerInit(inviteNode: InviteNode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.httpGatewayControllerInit(inviteNode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rebuilds the pki and hash database based on the local blockchain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async httpGatewayControllerRebuild(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.httpGatewayControllerRebuild(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resets the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async httpGatewayControllerReset(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.httpGatewayControllerReset(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NodeGatewayApi - factory interface
 * @export
 */
export const NodeGatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeGatewayApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the type of the node and the service that was exposed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpGatewayControllerInformation(options?: any): AxiosPromise<void> {
            return localVarFp.httpGatewayControllerInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pass an invite code to init this node.
         * @param {InviteNode} inviteNode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpGatewayControllerInit(inviteNode: InviteNode, options?: any): AxiosPromise<void> {
            return localVarFp.httpGatewayControllerInit(inviteNode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rebuilds the pki and hash database based on the local blockchain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpGatewayControllerRebuild(options?: any): AxiosPromise<void> {
            return localVarFp.httpGatewayControllerRebuild(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resets the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpGatewayControllerReset(options?: any): AxiosPromise<void> {
            return localVarFp.httpGatewayControllerReset(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodeGatewayApi - object-oriented interface
 * @export
 * @class NodeGatewayApi
 * @extends {BaseAPI}
 */
export class NodeGatewayApi extends BaseAPI {
    /**
     * 
     * @summary Returns the type of the node and the service that was exposed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeGatewayApi
     */
    public httpGatewayControllerInformation(options?: AxiosRequestConfig) {
        return NodeGatewayApiFp(this.configuration).httpGatewayControllerInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pass an invite code to init this node.
     * @param {InviteNode} inviteNode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeGatewayApi
     */
    public httpGatewayControllerInit(inviteNode: InviteNode, options?: AxiosRequestConfig) {
        return NodeGatewayApiFp(this.configuration).httpGatewayControllerInit(inviteNode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rebuilds the pki and hash database based on the local blockchain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeGatewayApi
     */
    public httpGatewayControllerRebuild(options?: AxiosRequestConfig) {
        return NodeGatewayApiFp(this.configuration).httpGatewayControllerRebuild(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resets the node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeGatewayApi
     */
    public httpGatewayControllerReset(options?: AxiosRequestConfig) {
        return NodeGatewayApiFp(this.configuration).httpGatewayControllerReset(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchemaGatewayApi - axios parameter creator
 * @export
 */
export const SchemaGatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds new schema to the chain.
         * @param {SchemaTransactionDto} schemaTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewaySchemaControllerCreate: async (schemaTransactionDto: SchemaTransactionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schemaTransactionDto' is not null or undefined
            assertParamExists('gatewaySchemaControllerCreate', 'schemaTransactionDto', schemaTransactionDto)
            const localVarPath = `/schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schemaTransactionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaGatewayApi - functional programming interface
 * @export
 */
export const SchemaGatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaGatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Adds new schema to the chain.
         * @param {SchemaTransactionDto} schemaTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gatewaySchemaControllerCreate(schemaTransactionDto: SchemaTransactionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gatewaySchemaControllerCreate(schemaTransactionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchemaGatewayApi - factory interface
 * @export
 */
export const SchemaGatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaGatewayApiFp(configuration)
    return {
        /**
         * 
         * @summary Adds new schema to the chain.
         * @param {SchemaTransactionDto} schemaTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewaySchemaControllerCreate(schemaTransactionDto: SchemaTransactionDto, options?: any): AxiosPromise<SchemaResponse> {
            return localVarFp.gatewaySchemaControllerCreate(schemaTransactionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemaGatewayApi - object-oriented interface
 * @export
 * @class SchemaGatewayApi
 * @extends {BaseAPI}
 */
export class SchemaGatewayApi extends BaseAPI {
    /**
     * 
     * @summary Adds new schema to the chain.
     * @param {SchemaTransactionDto} schemaTransactionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaGatewayApi
     */
    public gatewaySchemaControllerCreate(schemaTransactionDto: SchemaTransactionDto, options?: AxiosRequestConfig) {
        return SchemaGatewayApiFp(this.configuration).gatewaySchemaControllerCreate(schemaTransactionDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TemplateGatewayApi - axios parameter creator
 * @export
 */
export const TemplateGatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds new template to the chain.
         * @param {TemplateTransactionDto} templateTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayTemplateControllerCreate: async (templateTransactionDto: TemplateTransactionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateTransactionDto' is not null or undefined
            assertParamExists('gatewayTemplateControllerCreate', 'templateTransactionDto', templateTransactionDto)
            const localVarPath = `/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(templateTransactionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateGatewayApi - functional programming interface
 * @export
 */
export const TemplateGatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateGatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Adds new template to the chain.
         * @param {TemplateTransactionDto} templateTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gatewayTemplateControllerCreate(templateTransactionDto: TemplateTransactionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gatewayTemplateControllerCreate(templateTransactionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateGatewayApi - factory interface
 * @export
 */
export const TemplateGatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateGatewayApiFp(configuration)
    return {
        /**
         * 
         * @summary Adds new template to the chain.
         * @param {TemplateTransactionDto} templateTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayTemplateControllerCreate(templateTransactionDto: TemplateTransactionDto, options?: any): AxiosPromise<TemplateResponse> {
            return localVarFp.gatewayTemplateControllerCreate(templateTransactionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplateGatewayApi - object-oriented interface
 * @export
 * @class TemplateGatewayApi
 * @extends {BaseAPI}
 */
export class TemplateGatewayApi extends BaseAPI {
    /**
     * 
     * @summary Adds new template to the chain.
     * @param {TemplateTransactionDto} templateTransactionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateGatewayApi
     */
    public gatewayTemplateControllerCreate(templateTransactionDto: TemplateTransactionDto, options?: AxiosRequestConfig) {
        return TemplateGatewayApiFp(this.configuration).gatewayTemplateControllerCreate(templateTransactionDto, options).then((request) => request(this.axios, this.basePath));
    }
}


