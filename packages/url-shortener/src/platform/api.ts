/* tslint:disable */
/* eslint-disable */
/**
 * Sign
 * endpoints to interact with the signature service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateCredentialsDto
 */
export interface CreateCredentialsDto {
    /**
     * values of the credential
     * @type {object}
     * @memberof CreateCredentialsDto
     */
    'values': object;
    /**
     * identity of the template. If none is passed the one from the config is used.
     * @type {string}
     * @memberof CreateCredentialsDto
     */
    'templateId'?: string;
    /**
     * email to send the credential to
     * @type {string}
     * @memberof CreateCredentialsDto
     */
    'email': string;
    /**
     * identifier of the signer
     * @type {string}
     * @memberof CreateCredentialsDto
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface CreateTemplateDto
 */
export interface CreateTemplateDto {
    /**
     * html of the template
     * @type {string}
     * @memberof CreateTemplateDto
     */
    'template': string;
    /**
     * json-ld schema of values
     * @type {object}
     * @memberof CreateTemplateDto
     */
    'values': object;
    /**
     * if set the the template with be decoded from base64
     * @type {boolean}
     * @memberof CreateTemplateDto
     */
    'encoded'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateTemplateResponseDto
 */
export interface CreateTemplateResponseDto {
    /**
     * generated id of the template
     * @type {string}
     * @memberof CreateTemplateResponseDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ResolveResponse
 */
export interface ResolveResponse {
    /**
     * 
     * @type {string}
     * @memberof ResolveResponse
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ResolveResponse
     */
    'iv': string;
}
/**
 * 
 * @export
 * @interface ShortenDto
 */
export interface ShortenDto {
    /**
     * 
     * @type {string}
     * @memberof ShortenDto
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ShortenDto
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ShortenDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ShortenResponse
 */
export interface ShortenResponse {
    /**
     * 
     * @type {string}
     * @memberof ShortenResponse
     */
    'url': string;
}

/**
 * CredentialsPlatformApi - axios parameter creator
 * @export
 */
export const CredentialsPlatformApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new credential and send it to the user.
         * @param {CreateCredentialsDto} createCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsControllerCreate: async (createCredentialsDto: CreateCredentialsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCredentialsDto' is not null or undefined
            assertParamExists('credentialsControllerCreate', 'createCredentialsDto', createCredentialsDto)
            const localVarPath = `/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCredentialsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new template.
         * @param {CreateTemplateDto} createTemplateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsControllerCreateTemplate: async (createTemplateDto: CreateTemplateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTemplateDto' is not null or undefined
            assertParamExists('credentialsControllerCreateTemplate', 'createTemplateDto', createTemplateDto)
            const localVarPath = `/credentials/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTemplateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CredentialsPlatformApi - functional programming interface
 * @export
 */
export const CredentialsPlatformApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CredentialsPlatformApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new credential and send it to the user.
         * @param {CreateCredentialsDto} createCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialsControllerCreate(createCredentialsDto: CreateCredentialsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialsControllerCreate(createCredentialsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new template.
         * @param {CreateTemplateDto} createTemplateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialsControllerCreateTemplate(createTemplateDto: CreateTemplateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTemplateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialsControllerCreateTemplate(createTemplateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CredentialsPlatformApi - factory interface
 * @export
 */
export const CredentialsPlatformApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CredentialsPlatformApiFp(configuration)
    return {
        /**
         * Create a new credential and send it to the user.
         * @param {CreateCredentialsDto} createCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsControllerCreate(createCredentialsDto: CreateCredentialsDto, options?: any): AxiosPromise<void> {
            return localVarFp.credentialsControllerCreate(createCredentialsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new template.
         * @param {CreateTemplateDto} createTemplateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsControllerCreateTemplate(createTemplateDto: CreateTemplateDto, options?: any): AxiosPromise<CreateTemplateResponseDto> {
            return localVarFp.credentialsControllerCreateTemplate(createTemplateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CredentialsPlatformApi - object-oriented interface
 * @export
 * @class CredentialsPlatformApi
 * @extends {BaseAPI}
 */
export class CredentialsPlatformApi extends BaseAPI {
    /**
     * Create a new credential and send it to the user.
     * @param {CreateCredentialsDto} createCredentialsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsPlatformApi
     */
    public credentialsControllerCreate(createCredentialsDto: CreateCredentialsDto, options?: AxiosRequestConfig) {
        return CredentialsPlatformApiFp(this.configuration).credentialsControllerCreate(createCredentialsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new template.
     * @param {CreateTemplateDto} createTemplateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsPlatformApi
     */
    public credentialsControllerCreateTemplate(createTemplateDto: CreateTemplateDto, options?: AxiosRequestConfig) {
        return CredentialsPlatformApiFp(this.configuration).credentialsControllerCreateTemplate(createTemplateDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShortenPlatformApi - axios parameter creator
 * @export
 */
export const ShortenPlatformApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenControllerResolve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shortenControllerResolve', 'id', id)
            const localVarPath = `/shorten/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ShortenDto} shortenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenControllerShorten: async (shortenDto: ShortenDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortenDto' is not null or undefined
            assertParamExists('shortenControllerShorten', 'shortenDto', shortenDto)
            const localVarPath = `/shorten`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shortenDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShortenPlatformApi - functional programming interface
 * @export
 */
export const ShortenPlatformApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShortenPlatformApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shortenControllerResolve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shortenControllerResolve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ShortenDto} shortenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shortenControllerShorten(shortenDto: ShortenDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShortenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shortenControllerShorten(shortenDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShortenPlatformApi - factory interface
 * @export
 */
export const ShortenPlatformApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShortenPlatformApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenControllerResolve(id: string, options?: any): AxiosPromise<ResolveResponse> {
            return localVarFp.shortenControllerResolve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ShortenDto} shortenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenControllerShorten(shortenDto: ShortenDto, options?: any): AxiosPromise<ShortenResponse> {
            return localVarFp.shortenControllerShorten(shortenDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShortenPlatformApi - object-oriented interface
 * @export
 * @class ShortenPlatformApi
 * @extends {BaseAPI}
 */
export class ShortenPlatformApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShortenPlatformApi
     */
    public shortenControllerResolve(id: string, options?: AxiosRequestConfig) {
        return ShortenPlatformApiFp(this.configuration).shortenControllerResolve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShortenDto} shortenDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShortenPlatformApi
     */
    public shortenControllerShorten(shortenDto: ShortenDto, options?: AxiosRequestConfig) {
        return ShortenPlatformApiFp(this.configuration).shortenControllerShorten(shortenDto, options).then((request) => request(this.axios, this.basePath));
    }
}


