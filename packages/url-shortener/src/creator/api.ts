/* tslint:disable */
/* eslint-disable */
/**
 * Sign
 * endpoints to interact with the signature service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateCredentialsDto
 */
export interface CreateCredentialsDto {
    /**
     * values of the credential
     * @type {CredentialValues}
     * @memberof CreateCredentialsDto
     */
    'values': CredentialValues;
    /**
     * identity of the template. If none is passed the one from the config is used.
     * @type {string}
     * @memberof CreateCredentialsDto
     */
    'templateId'?: string;
    /**
     * email to send the credential to
     * @type {string}
     * @memberof CreateCredentialsDto
     */
    'email'?: string;
    /**
     * identifier of the signer, if none is passed the one from the config is used
     * @type {string}
     * @memberof CreateCredentialsDto
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface CreateTemplateDto
 */
export interface CreateTemplateDto {
    /**
     * html of the template
     * @type {string}
     * @memberof CreateTemplateDto
     */
    'template': string;
    /**
     * json-ld schema of values
     * @type {object}
     * @memberof CreateTemplateDto
     */
    'values': object;
    /**
     * if set the the template with be decoded from base64
     * @type {boolean}
     * @memberof CreateTemplateDto
     */
    'encoded'?: boolean;
    /**
     * identifier of the signer, if none is passed the one from the config is used
     * @type {string}
     * @memberof CreateTemplateDto
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface CreateTemplateResponseDto
 */
export interface CreateTemplateResponseDto {
    /**
     * generated id of the template
     * @type {string}
     * @memberof CreateTemplateResponseDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * Name of the user
     * @type {string}
     * @memberof CreateUserDto
     */
    'username': string;
    /**
     * JSON-Encoded information to desribe the user object.
     * @type {object}
     * @memberof CreateUserDto
     */
    'description': object;
}
/**
 * 
 * @export
 * @interface CredentialValues
 */
export interface CredentialValues {
    /**
     * prename of the person
     * @type {string}
     * @memberof CredentialValues
     */
    'prename': string;
    /**
     * surname of the person.
     * @type {string}
     * @memberof CredentialValues
     */
    'surname': string;
    /**
     * date of birth of the person.
     * @type {string}
     * @memberof CredentialValues
     */
    'dateOfBirth': string;
    /**
     * date of training
     * @type {string}
     * @memberof CredentialValues
     */
    'dateOfTraining': string;
    /**
     * identifier of the chapter
     * @type {string}
     * @memberof CredentialValues
     */
    'chapter': string;
    /**
     * identifier if a possible seconds chapter
     * @type {string}
     * @memberof CredentialValues
     */
    'chapter2'?: string;
    /**
     * identifier of the training course
     * @type {string}
     * @memberof CredentialValues
     */
    'trainingId': string;
}
/**
 * 
 * @export
 * @interface ResolveResponse
 */
export interface ResolveResponse {
    /**
     * 
     * @type {string}
     * @memberof ResolveResponse
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ResolveResponse
     */
    'iv': string;
}
/**
 * 
 * @export
 * @interface ShortenDto
 */
export interface ShortenDto {
    /**
     * 
     * @type {string}
     * @memberof ShortenDto
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ShortenDto
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ShortenDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ShortenResponse
 */
export interface ShortenResponse {
    /**
     * 
     * @type {string}
     * @memberof ShortenResponse
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * unique identifier of the user
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {object}
     * @memberof User
     */
    'description': object;
}

/**
 * CredentialsCreatorApi - axios parameter creator
 * @export
 */
export const CredentialsCreatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new credential and send it to the user.
         * @param {CreateCredentialsDto} createCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsControllerCreate: async (createCredentialsDto: CreateCredentialsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCredentialsDto' is not null or undefined
            assertParamExists('credentialsControllerCreate', 'createCredentialsDto', createCredentialsDto)
            const localVarPath = `/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCredentialsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new template.
         * @param {CreateTemplateDto} createTemplateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsControllerCreateTemplate: async (createTemplateDto: CreateTemplateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTemplateDto' is not null or undefined
            assertParamExists('credentialsControllerCreateTemplate', 'createTemplateDto', createTemplateDto)
            const localVarPath = `/credentials/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTemplateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CredentialsCreatorApi - functional programming interface
 * @export
 */
export const CredentialsCreatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CredentialsCreatorApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new credential and send it to the user.
         * @param {CreateCredentialsDto} createCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialsControllerCreate(createCredentialsDto: CreateCredentialsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialsControllerCreate(createCredentialsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new template.
         * @param {CreateTemplateDto} createTemplateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialsControllerCreateTemplate(createTemplateDto: CreateTemplateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTemplateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialsControllerCreateTemplate(createTemplateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CredentialsCreatorApi - factory interface
 * @export
 */
export const CredentialsCreatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CredentialsCreatorApiFp(configuration)
    return {
        /**
         * Create a new credential and send it to the user.
         * @param {CreateCredentialsDto} createCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsControllerCreate(createCredentialsDto: CreateCredentialsDto, options?: any): AxiosPromise<void> {
            return localVarFp.credentialsControllerCreate(createCredentialsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new template.
         * @param {CreateTemplateDto} createTemplateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsControllerCreateTemplate(createTemplateDto: CreateTemplateDto, options?: any): AxiosPromise<CreateTemplateResponseDto> {
            return localVarFp.credentialsControllerCreateTemplate(createTemplateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CredentialsCreatorApi - object-oriented interface
 * @export
 * @class CredentialsCreatorApi
 * @extends {BaseAPI}
 */
export class CredentialsCreatorApi extends BaseAPI {
    /**
     * Create a new credential and send it to the user.
     * @param {CreateCredentialsDto} createCredentialsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsCreatorApi
     */
    public credentialsControllerCreate(createCredentialsDto: CreateCredentialsDto, options?: AxiosRequestConfig) {
        return CredentialsCreatorApiFp(this.configuration).credentialsControllerCreate(createCredentialsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new template.
     * @param {CreateTemplateDto} createTemplateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsCreatorApi
     */
    public credentialsControllerCreateTemplate(createTemplateDto: CreateTemplateDto, options?: AxiosRequestConfig) {
        return CredentialsCreatorApiFp(this.configuration).credentialsControllerCreateTemplate(createTemplateDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesCreatorApi - axios parameter creator
 * @export
 */
export const FilesCreatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sign a file and store it
         * @param {any} file file that should be signed
         * @param {boolean} scale if set to true the document will be scaled down to place the footer
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerCreate: async (file: any, scale: boolean, user?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('filesControllerCreate', 'file', file)
            // verify required parameter 'scale' is not null or undefined
            assertParamExists('filesControllerCreate', 'scale', scale)
            const localVarPath = `/files/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (scale !== undefined) { 
                localVarFormParams.append('scale', scale as any);
            }
    
            if (user !== undefined) { 
                localVarFormParams.append('user', user as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary download a signed file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerDownload: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesControllerDownload', 'id', id)
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary revoke a file
         * @param {any} file file that should be signed
         * @param {boolean} scale if set to true the document will be scaled down to place the footer
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerRevoke: async (file: any, scale: boolean, user?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('filesControllerRevoke', 'file', file)
            // verify required parameter 'scale' is not null or undefined
            assertParamExists('filesControllerRevoke', 'scale', scale)
            const localVarPath = `/files/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (scale !== undefined) { 
                localVarFormParams.append('scale', scale as any);
            }
    
            if (user !== undefined) { 
                localVarFormParams.append('user', user as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesCreatorApi - functional programming interface
 * @export
 */
export const FilesCreatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesCreatorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary sign a file and store it
         * @param {any} file file that should be signed
         * @param {boolean} scale if set to true the document will be scaled down to place the footer
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerCreate(file: any, scale: boolean, user?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerCreate(file, scale, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary download a signed file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerDownload(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerDownload(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary revoke a file
         * @param {any} file file that should be signed
         * @param {boolean} scale if set to true the document will be scaled down to place the footer
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerRevoke(file: any, scale: boolean, user?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerRevoke(file, scale, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesCreatorApi - factory interface
 * @export
 */
export const FilesCreatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesCreatorApiFp(configuration)
    return {
        /**
         * 
         * @summary sign a file and store it
         * @param {any} file file that should be signed
         * @param {boolean} scale if set to true the document will be scaled down to place the footer
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerCreate(file: any, scale: boolean, user?: string, options?: any): AxiosPromise<any> {
            return localVarFp.filesControllerCreate(file, scale, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary download a signed file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerDownload(id: string, options?: any): AxiosPromise<any> {
            return localVarFp.filesControllerDownload(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary revoke a file
         * @param {any} file file that should be signed
         * @param {boolean} scale if set to true the document will be scaled down to place the footer
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerRevoke(file: any, scale: boolean, user?: string, options?: any): AxiosPromise<object> {
            return localVarFp.filesControllerRevoke(file, scale, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesCreatorApi - object-oriented interface
 * @export
 * @class FilesCreatorApi
 * @extends {BaseAPI}
 */
export class FilesCreatorApi extends BaseAPI {
    /**
     * 
     * @summary sign a file and store it
     * @param {any} file file that should be signed
     * @param {boolean} scale if set to true the document will be scaled down to place the footer
     * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesCreatorApi
     */
    public filesControllerCreate(file: any, scale: boolean, user?: string, options?: AxiosRequestConfig) {
        return FilesCreatorApiFp(this.configuration).filesControllerCreate(file, scale, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary download a signed file
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesCreatorApi
     */
    public filesControllerDownload(id: string, options?: AxiosRequestConfig) {
        return FilesCreatorApiFp(this.configuration).filesControllerDownload(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary revoke a file
     * @param {any} file file that should be signed
     * @param {boolean} scale if set to true the document will be scaled down to place the footer
     * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesCreatorApi
     */
    public filesControllerRevoke(file: any, scale: boolean, user?: string, options?: AxiosRequestConfig) {
        return FilesCreatorApiFp(this.configuration).filesControllerRevoke(file, scale, user, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShortenCreatorApi - axios parameter creator
 * @export
 */
export const ShortenCreatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenControllerResolve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shortenControllerResolve', 'id', id)
            const localVarPath = `/shorten/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ShortenDto} shortenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenControllerShorten: async (shortenDto: ShortenDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortenDto' is not null or undefined
            assertParamExists('shortenControllerShorten', 'shortenDto', shortenDto)
            const localVarPath = `/shorten`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shortenDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShortenCreatorApi - functional programming interface
 * @export
 */
export const ShortenCreatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShortenCreatorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shortenControllerResolve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shortenControllerResolve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ShortenDto} shortenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shortenControllerShorten(shortenDto: ShortenDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShortenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shortenControllerShorten(shortenDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShortenCreatorApi - factory interface
 * @export
 */
export const ShortenCreatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShortenCreatorApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenControllerResolve(id: string, options?: any): AxiosPromise<ResolveResponse> {
            return localVarFp.shortenControllerResolve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ShortenDto} shortenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenControllerShorten(shortenDto: ShortenDto, options?: any): AxiosPromise<ShortenResponse> {
            return localVarFp.shortenControllerShorten(shortenDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShortenCreatorApi - object-oriented interface
 * @export
 * @class ShortenCreatorApi
 * @extends {BaseAPI}
 */
export class ShortenCreatorApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShortenCreatorApi
     */
    public shortenControllerResolve(id: string, options?: AxiosRequestConfig) {
        return ShortenCreatorApiFp(this.configuration).shortenControllerResolve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShortenDto} shortenDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShortenCreatorApi
     */
    public shortenControllerShorten(shortenDto: ShortenDto, options?: AxiosRequestConfig) {
        return ShortenCreatorApiFp(this.configuration).shortenControllerShorten(shortenDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SignaturesCreatorApi - axios parameter creator
 * @export
 */
export const SignaturesCreatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary revoke a given file
         * @param {any} file file that should be signed
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesControllerRevoke: async (file: any, user?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('signaturesControllerRevoke', 'file', file)
            const localVarPath = `/signatures/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (user !== undefined) { 
                localVarFormParams.append('user', user as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sign a given file
         * @param {any} file file that should be signed
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesControllerSign: async (file: any, user?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('signaturesControllerSign', 'file', file)
            const localVarPath = `/signatures/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (user !== undefined) { 
                localVarFormParams.append('user', user as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary request signature of a given file
         * @param {any} file file that should be signed
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesControllerVerify: async (file: any, user?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('signaturesControllerVerify', 'file', file)
            const localVarPath = `/signatures/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (user !== undefined) { 
                localVarFormParams.append('user', user as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignaturesCreatorApi - functional programming interface
 * @export
 */
export const SignaturesCreatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignaturesCreatorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary revoke a given file
         * @param {any} file file that should be signed
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signaturesControllerRevoke(file: any, user?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signaturesControllerRevoke(file, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sign a given file
         * @param {any} file file that should be signed
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signaturesControllerSign(file: any, user?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signaturesControllerSign(file, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary request signature of a given file
         * @param {any} file file that should be signed
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signaturesControllerVerify(file: any, user?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signaturesControllerVerify(file, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignaturesCreatorApi - factory interface
 * @export
 */
export const SignaturesCreatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignaturesCreatorApiFp(configuration)
    return {
        /**
         * 
         * @summary revoke a given file
         * @param {any} file file that should be signed
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesControllerRevoke(file: any, user?: string, options?: any): AxiosPromise<object> {
            return localVarFp.signaturesControllerRevoke(file, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sign a given file
         * @param {any} file file that should be signed
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesControllerSign(file: any, user?: string, options?: any): AxiosPromise<object> {
            return localVarFp.signaturesControllerSign(file, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary request signature of a given file
         * @param {any} file file that should be signed
         * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesControllerVerify(file: any, user?: string, options?: any): AxiosPromise<object> {
            return localVarFp.signaturesControllerVerify(file, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignaturesCreatorApi - object-oriented interface
 * @export
 * @class SignaturesCreatorApi
 * @extends {BaseAPI}
 */
export class SignaturesCreatorApi extends BaseAPI {
    /**
     * 
     * @summary revoke a given file
     * @param {any} file file that should be signed
     * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesCreatorApi
     */
    public signaturesControllerRevoke(file: any, user?: string, options?: AxiosRequestConfig) {
        return SignaturesCreatorApiFp(this.configuration).signaturesControllerRevoke(file, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sign a given file
     * @param {any} file file that should be signed
     * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesCreatorApi
     */
    public signaturesControllerSign(file: any, user?: string, options?: AxiosRequestConfig) {
        return SignaturesCreatorApiFp(this.configuration).signaturesControllerSign(file, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary request signature of a given file
     * @param {any} file file that should be signed
     * @param {string} [user] identifier of the signer, if none is passed the one from the config is used
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesCreatorApi
     */
    public signaturesControllerVerify(file: any, user?: string, options?: AxiosRequestConfig) {
        return SignaturesCreatorApiFp(this.configuration).signaturesControllerVerify(file, user, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersCreatorApi - axios parameter creator
 * @export
 */
export const UsersCreatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new user entry.
         * @summary create a new user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (createUserDto: CreateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('usersControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a specific user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerFindOne', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRemove', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersCreatorApi - functional programming interface
 * @export
 */
export const UsersCreatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersCreatorApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new user entry.
         * @summary create a new user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(createUserDto: CreateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(createUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get a specific user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersCreatorApi - factory interface
 * @export
 */
export const UsersCreatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersCreatorApiFp(configuration)
    return {
        /**
         * Creates a new user entry.
         * @summary create a new user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(createUserDto: CreateUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a specific user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: string, options?: any): AxiosPromise<User> {
            return localVarFp.usersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersCreatorApi - object-oriented interface
 * @export
 * @class UsersCreatorApi
 * @extends {BaseAPI}
 */
export class UsersCreatorApi extends BaseAPI {
    /**
     * Creates a new user entry.
     * @summary create a new user
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCreatorApi
     */
    public usersControllerCreate(createUserDto: CreateUserDto, options?: AxiosRequestConfig) {
        return UsersCreatorApiFp(this.configuration).usersControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCreatorApi
     */
    public usersControllerFindAll(options?: AxiosRequestConfig) {
        return UsersCreatorApiFp(this.configuration).usersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a specific user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCreatorApi
     */
    public usersControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return UsersCreatorApiFp(this.configuration).usersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete a user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersCreatorApi
     */
    public usersControllerRemove(id: string, options?: AxiosRequestConfig) {
        return UsersCreatorApiFp(this.configuration).usersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
}


