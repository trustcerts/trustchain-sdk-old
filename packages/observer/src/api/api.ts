/* tslint:disable */
/* eslint-disable */
/**
 * Observer interaction
 * Explore the functionality of a Observer
 *
 * The version of the OpenAPI document: 1.0.0 - f20cfc7657a97641
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BlockInfo
 */
export interface BlockInfo {
    /**
     * id of the block
     * @type {number}
     * @memberof BlockInfo
     */
    'id': number;
    /**
     * time when the block got persisted
     * @type {string}
     * @memberof BlockInfo
     */
    'createdAt': string;
    /**
     * time when the transaction was persisted in an imported blockchain
     * @type {string}
     * @memberof BlockInfo
     */
    'imported'?: string;
}
/**
 * 
 * @export
 * @interface Compression
 */
export interface Compression {
    /**
     * 
     * @type {CompressionType}
     * @memberof Compression
     */
    'type': CompressionType;
    /**
     * Json encoded information that are required for this kind of compression.
     * @type {string}
     * @memberof Compression
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum CompressionType {
    JSON = 'JSON',
    PROTO = 'PROTO'
}

/**
 * 
 * @export
 * @interface ControllerManage
 */
export interface ControllerManage {
    /**
     * id that should be added to the controller list.
     * @type {Array<string>}
     * @memberof ControllerManage
     */
    'add'?: Array<string>;
    /**
     * id that should be removed from the controller list.
     * @type {Array<string>}
     * @memberof ControllerManage
     */
    'remove'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DidDocument
 */
export interface DidDocument {
    /**
     * schemas that define the document.
     * @type {Array<string>}
     * @memberof DidDocument
     */
    '@context': Array<string>;
    /**
     * unique identifier of a did.
     * @type {string}
     * @memberof DidDocument
     */
    'id': string;
    /**
     * unique identifiers of the controller.
     * @type {Array<string>}
     * @memberof DidDocument
     */
    'controller': Array<string>;
}
/**
 * 
 * @export
 * @interface DidDocumentMetaData
 */
export interface DidDocumentMetaData {
    /**
     * 
     * @type {string}
     * @memberof DidDocumentMetaData
     */
    'updated': string;
    /**
     * 
     * @type {boolean}
     * @memberof DidDocumentMetaData
     */
    'deactivated': boolean;
    /**
     * 
     * @type {string}
     * @memberof DidDocumentMetaData
     */
    'nextUpdate': string;
    /**
     * 
     * @type {number}
     * @memberof DidDocumentMetaData
     */
    'versionId': number;
    /**
     * 
     * @type {number}
     * @memberof DidDocumentMetaData
     */
    'nextVersionId': number;
    /**
     * 
     * @type {string}
     * @memberof DidDocumentMetaData
     */
    'created': string;
}
/**
 * 
 * @export
 * @interface DidHashDocument
 */
export interface DidHashDocument {
    /**
     * schemas that define the document.
     * @type {Array<string>}
     * @memberof DidHashDocument
     */
    '@context': Array<string>;
    /**
     * unique identifier of a did.
     * @type {string}
     * @memberof DidHashDocument
     */
    'id': string;
    /**
     * unique identifiers of the controller.
     * @type {Array<string>}
     * @memberof DidHashDocument
     */
    'controller': Array<string>;
    /**
     * used algorithm
     * @type {string}
     * @memberof DidHashDocument
     */
    'algorithm': string;
    /**
     * date when the credential got revoked
     * @type {string}
     * @memberof DidHashDocument
     */
    'revoked'?: string;
}
/**
 * 
 * @export
 * @interface DidHashStructure
 */
export interface DidHashStructure {
    /**
     * unique identifier of a did
     * @type {string}
     * @memberof DidHashStructure
     */
    'id': string;
    /**
     * Did that controls this did.
     * @type {ControllerManage}
     * @memberof DidHashStructure
     */
    'controller'?: ControllerManage;
    /**
     * Used algorithm for the hash.
     * @type {string}
     * @memberof DidHashStructure
     */
    'algorithm'?: string;
    /**
     * if set to a date it will revoke the hash
     * @type {string}
     * @memberof DidHashStructure
     */
    'revoked'?: string;
}
/**
 * 
 * @export
 * @interface DidHashTransaction
 */
export interface DidHashTransaction {
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidHashTransaction
     */
    'signature': SignatureInfo;
    /**
     * Blockinformation
     * @type {BlockInfo}
     * @memberof DidHashTransaction
     */
    'block': BlockInfo;
    /**
     * Timestamp when the element was created.
     * @type {string}
     * @memberof DidHashTransaction
     */
    'createdAt': string;
    /**
     * Values of the transaction
     * @type {DidHashStructure}
     * @memberof DidHashTransaction
     */
    'values': DidHashStructure;
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidHashTransaction
     */
    'didDocumentSignature': SignatureInfo;
    /**
     * 
     * @type {string}
     * @memberof DidHashTransaction
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DidId
 */
export interface DidId {
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidId
     */
    'signature': SignatureInfo;
    /**
     * Blockinformation
     * @type {BlockInfo}
     * @memberof DidId
     */
    'block': BlockInfo;
    /**
     * Roles that are connected with this did, e.g. is this did authorized
     * @type {Array<RoleManageType>}
     * @memberof DidId
     */
    'roles': Array<RoleManageType>;
    /**
     * 
     * @type {Array<Key>}
     * @memberof DidId
     */
    'keys': Array<Key>;
    /**
     * 
     * @type {Array<VerificationRelation>}
     * @memberof DidId
     */
    'verificationRelationships': Array<VerificationRelation>;
    /**
     * 
     * @type {Array<Service>}
     * @memberof DidId
     */
    'services': Array<Service>;
    /**
     * 
     * @type {string}
     * @memberof DidId
     */
    'id': string;
    /**
     * 
     * @type {Array<DidId>}
     * @memberof DidId
     */
    'controllers': Array<DidId>;
}
/**
 * 
 * @export
 * @interface DidIdDocument
 */
export interface DidIdDocument {
    /**
     * schemas that define the document.
     * @type {Array<string>}
     * @memberof DidIdDocument
     */
    '@context': Array<string>;
    /**
     * unique identifier of a did.
     * @type {string}
     * @memberof DidIdDocument
     */
    'id': string;
    /**
     * unique identifiers of the controller.
     * @type {Array<string>}
     * @memberof DidIdDocument
     */
    'controller': Array<string>;
    /**
     * array of keys that belong to the did document.
     * @type {Array<DidPublicKey>}
     * @memberof DidIdDocument
     */
    'verificationMethod': Array<DidPublicKey>;
    /**
     * keys that are used for authentication.
     * @type {Array<string>}
     * @memberof DidIdDocument
     */
    'authentication': Array<string>;
    /**
     * keys that are used for assertion.
     * @type {Array<string>}
     * @memberof DidIdDocument
     */
    'assertionMethod': Array<string>;
    /**
     * keys that are used for modification.
     * @type {Array<string>}
     * @memberof DidIdDocument
     */
    'modification': Array<string>;
    /**
     * services that are connected with this did.
     * @type {Array<DidService>}
     * @memberof DidIdDocument
     */
    'service': Array<DidService>;
    /**
     * role of the did
     * @type {Array<RoleManageType>}
     * @memberof DidIdDocument
     */
    'role': Array<RoleManageType>;
}
/**
 * 
 * @export
 * @interface DidIdStructure
 */
export interface DidIdStructure {
    /**
     * unique identifier of a did
     * @type {string}
     * @memberof DidIdStructure
     */
    'id': string;
    /**
     * Did that controls this did.
     * @type {ControllerManage}
     * @memberof DidIdStructure
     */
    'controller'?: ControllerManage;
    /**
     * 
     * @type {RoleManage}
     * @memberof DidIdStructure
     */
    'role'?: RoleManage;
    /**
     * 
     * @type {VerificationMethod}
     * @memberof DidIdStructure
     */
    'verificationMethod'?: VerificationMethod;
    /**
     * 
     * @type {ServiceMange}
     * @memberof DidIdStructure
     */
    'service'?: ServiceMange;
    /**
     * 
     * @type {VerificationRelationshipManage}
     * @memberof DidIdStructure
     */
    'authentication'?: VerificationRelationshipManage;
    /**
     * 
     * @type {VerificationRelationshipManage}
     * @memberof DidIdStructure
     */
    'assertionMethod'?: VerificationRelationshipManage;
    /**
     * 
     * @type {VerificationRelationshipManage}
     * @memberof DidIdStructure
     */
    'keyAgreement'?: VerificationRelationshipManage;
    /**
     * 
     * @type {VerificationRelationshipManage}
     * @memberof DidIdStructure
     */
    'modification'?: VerificationRelationshipManage;
}
/**
 * 
 * @export
 * @interface DidIdTransaction
 */
export interface DidIdTransaction {
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidIdTransaction
     */
    'signature': SignatureInfo;
    /**
     * Blockinformation
     * @type {BlockInfo}
     * @memberof DidIdTransaction
     */
    'block': BlockInfo;
    /**
     * Timestamp when the element was created.
     * @type {string}
     * @memberof DidIdTransaction
     */
    'createdAt': string;
    /**
     * Values of the transaction
     * @type {DidIdStructure}
     * @memberof DidIdTransaction
     */
    'values': DidIdStructure;
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidIdTransaction
     */
    'didDocumentSignature': SignatureInfo;
    /**
     * 
     * @type {string}
     * @memberof DidIdTransaction
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DidIdTransactionBody
 */
export interface DidIdTransactionBody {
    /**
     * Version number of the transaction.
     * @type {number}
     * @memberof DidIdTransactionBody
     */
    'version': number;
    /**
     * timestamp when transaction was created.
     * @type {string}
     * @memberof DidIdTransactionBody
     */
    'date': string;
    /**
     * 
     * @type {TransactionType}
     * @memberof DidIdTransactionBody
     */
    'type': TransactionType;
    /**
     * elements of the did document
     * @type {DidIdStructure}
     * @memberof DidIdTransactionBody
     */
    'value': DidIdStructure;
}
/**
 * 
 * @export
 * @interface DidIdTransactionDto
 */
export interface DidIdTransactionDto {
    /**
     * Version number of the base transaction.
     * @type {number}
     * @memberof DidIdTransactionDto
     */
    'version': number;
    /**
     * 
     * @type {DidIdTransactionBody}
     * @memberof DidIdTransactionDto
     */
    'body': DidIdTransactionBody;
    /**
     * 
     * @type {TransactionMetadata}
     * @memberof DidIdTransactionDto
     */
    'metadata': TransactionMetadata;
    /**
     * 
     * @type {SignatureInfo}
     * @memberof DidIdTransactionDto
     */
    'signature': SignatureInfo;
}
/**
 * 
 * @export
 * @interface DidPublicKey
 */
export interface DidPublicKey {
    /**
     * unique identifier of a key
     * @type {string}
     * @memberof DidPublicKey
     */
    'id': string;
    /**
     * controller of the key
     * @type {string}
     * @memberof DidPublicKey
     */
    'controller': string;
    /**
     * 
     * @type {DidPublicKeyType}
     * @memberof DidPublicKey
     */
    'type': DidPublicKeyType;
    /**
     * encoded key value
     * @type {PublicKeyJwkDto}
     * @memberof DidPublicKey
     */
    'publicKeyJwk': PublicKeyJwkDto;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum DidPublicKeyType {
    RsaVerificationKey2018 = 'RsaVerificationKey2018'
}

/**
 * 
 * @export
 * @interface DidSchema
 */
export interface DidSchema {
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidSchema
     */
    'signature': SignatureInfo;
    /**
     * Blockinformation
     * @type {BlockInfo}
     * @memberof DidSchema
     */
    'block': BlockInfo;
    /**
     * value of the schema
     * @type {string}
     * @memberof DidSchema
     */
    'values': string;
    /**
     * 
     * @type {string}
     * @memberof DidSchema
     */
    'id': string;
    /**
     * 
     * @type {Array<DidId>}
     * @memberof DidSchema
     */
    'controllers': Array<DidId>;
}
/**
 * 
 * @export
 * @interface DidSchemaDocument
 */
export interface DidSchemaDocument {
    /**
     * schemas that define the document.
     * @type {Array<string>}
     * @memberof DidSchemaDocument
     */
    '@context': Array<string>;
    /**
     * unique identifier of a did.
     * @type {string}
     * @memberof DidSchemaDocument
     */
    'id': string;
    /**
     * unique identifiers of the controller.
     * @type {Array<string>}
     * @memberof DidSchemaDocument
     */
    'controller': Array<string>;
    /**
     * jsonld schema thsat defines a data structure
     * @type {string}
     * @memberof DidSchemaDocument
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface DidSchemaStructure
 */
export interface DidSchemaStructure {
    /**
     * unique identifier of a did
     * @type {string}
     * @memberof DidSchemaStructure
     */
    'id': string;
    /**
     * Did that controls this did.
     * @type {ControllerManage}
     * @memberof DidSchemaStructure
     */
    'controller'?: ControllerManage;
    /**
     * json schema to validate the data that should be parsed into the
     * @type {string}
     * @memberof DidSchemaStructure
     */
    'schema'?: string;
}
/**
 * 
 * @export
 * @interface DidSchemaTransaction
 */
export interface DidSchemaTransaction {
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidSchemaTransaction
     */
    'signature': SignatureInfo;
    /**
     * Blockinformation
     * @type {BlockInfo}
     * @memberof DidSchemaTransaction
     */
    'block': BlockInfo;
    /**
     * Timestamp when the element was created.
     * @type {string}
     * @memberof DidSchemaTransaction
     */
    'createdAt': string;
    /**
     * Values of the transaction
     * @type {DidSchemaStructure}
     * @memberof DidSchemaTransaction
     */
    'values': DidSchemaStructure;
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidSchemaTransaction
     */
    'didDocumentSignature': SignatureInfo;
    /**
     * 
     * @type {string}
     * @memberof DidSchemaTransaction
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DidService
 */
export interface DidService {
    /**
     * unique identifier of a service
     * @type {string}
     * @memberof DidService
     */
    'id': string;
    /**
     * name of the service
     * @type {string}
     * @memberof DidService
     */
    'type': string;
    /**
     * url to the service
     * @type {string}
     * @memberof DidService
     */
    'endpoint': string;
}
/**
 * 
 * @export
 * @interface DidStructure
 */
export interface DidStructure {
    /**
     * unique identifier of a did
     * @type {string}
     * @memberof DidStructure
     */
    'id': string;
    /**
     * Did that controls this did.
     * @type {ControllerManage}
     * @memberof DidStructure
     */
    'controller'?: ControllerManage;
}
/**
 * 
 * @export
 * @interface DidTemplate
 */
export interface DidTemplate {
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidTemplate
     */
    'signature': SignatureInfo;
    /**
     * Blockinformation
     * @type {BlockInfo}
     * @memberof DidTemplate
     */
    'block': BlockInfo;
    /**
     * information about the compression
     * @type {Compression}
     * @memberof DidTemplate
     */
    'compression': Compression;
    /**
     * value of the template
     * @type {string}
     * @memberof DidTemplate
     */
    'template': string;
    /**
     * schema of the input
     * @type {DidSchema}
     * @memberof DidTemplate
     */
    'schemaObject': DidSchema;
    /**
     * 
     * @type {string}
     * @memberof DidTemplate
     */
    'id': string;
    /**
     * 
     * @type {Array<DidId>}
     * @memberof DidTemplate
     */
    'controllers': Array<DidId>;
}
/**
 * 
 * @export
 * @interface DidTemplateDocument
 */
export interface DidTemplateDocument {
    /**
     * schemas that define the document.
     * @type {Array<string>}
     * @memberof DidTemplateDocument
     */
    '@context': Array<string>;
    /**
     * unique identifier of a did.
     * @type {string}
     * @memberof DidTemplateDocument
     */
    'id': string;
    /**
     * unique identifiers of the controller.
     * @type {Array<string>}
     * @memberof DidTemplateDocument
     */
    'controller': Array<string>;
    /**
     * template that should be used.
     * @type {string}
     * @memberof DidTemplateDocument
     */
    'template': string;
    /**
     * did of the schema the template is based on
     * @type {string}
     * @memberof DidTemplateDocument
     */
    'schemaId': string;
    /**
     * 
     * @type {Compression}
     * @memberof DidTemplateDocument
     */
    'compression': Compression;
}
/**
 * 
 * @export
 * @interface DidTemplateStructure
 */
export interface DidTemplateStructure {
    /**
     * unique identifier of a template
     * @type {string}
     * @memberof DidTemplateStructure
     */
    'id': string;
    /**
     * Did that controls this did.
     * @type {ControllerManage}
     * @memberof DidTemplateStructure
     */
    'controller'?: ControllerManage;
    /**
     * template that should be used.
     * @type {string}
     * @memberof DidTemplateStructure
     */
    'template': string;
    /**
     * did of the schema the template is based on
     * @type {string}
     * @memberof DidTemplateStructure
     */
    'schemaId': string;
    /**
     * 
     * @type {Compression}
     * @memberof DidTemplateStructure
     */
    'compression': Compression;
}
/**
 * 
 * @export
 * @interface DidTemplateTransaction
 */
export interface DidTemplateTransaction {
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidTemplateTransaction
     */
    'signature': SignatureInfo;
    /**
     * Blockinformation
     * @type {BlockInfo}
     * @memberof DidTemplateTransaction
     */
    'block': BlockInfo;
    /**
     * Timestamp when the element was created.
     * @type {string}
     * @memberof DidTemplateTransaction
     */
    'createdAt': string;
    /**
     * Values of the transaction
     * @type {DidTemplateStructure}
     * @memberof DidTemplateTransaction
     */
    'values': DidTemplateStructure;
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidTemplateTransaction
     */
    'didDocumentSignature': SignatureInfo;
    /**
     * 
     * @type {string}
     * @memberof DidTemplateTransaction
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DidTransaction
 */
export interface DidTransaction {
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidTransaction
     */
    'signature': SignatureInfo;
    /**
     * Blockinformation
     * @type {BlockInfo}
     * @memberof DidTransaction
     */
    'block': BlockInfo;
    /**
     * Timestamp when the element was created.
     * @type {string}
     * @memberof DidTransaction
     */
    'createdAt': string;
    /**
     * Values of the transaction
     * @type {DidStructure}
     * @memberof DidTransaction
     */
    'values': DidStructure;
    /**
     * Signature of the hash.
     * @type {SignatureInfo}
     * @memberof DidTransaction
     */
    'didDocumentSignature': SignatureInfo;
    /**
     * 
     * @type {string}
     * @memberof DidTransaction
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DocResponse
 */
export interface DocResponse {
    /**
     * parsed did document
     * @type {DidDocument}
     * @memberof DocResponse
     */
    'document': DidDocument;
    /**
     * signatures of the parsed document
     * @type {SignatureInfo}
     * @memberof DocResponse
     */
    'signatures': SignatureInfo;
    /**
     * Metadata of the document
     * @type {DidDocumentMetaData}
     * @memberof DocResponse
     */
    'metaData': DidDocumentMetaData;
}
/**
 * 
 * @export
 * @interface GenesisBlock
 */
export interface GenesisBlock {
    /**
     * index of the block
     * @type {number}
     * @memberof GenesisBlock
     */
    'index': number;
    /**
     * hash of the previous block
     * @type {string}
     * @memberof GenesisBlock
     */
    'previousHash': string;
    /**
     * merkle root hash
     * @type {string}
     * @memberof GenesisBlock
     */
    'hash': string;
    /**
     * timestamp of the block
     * @type {string}
     * @memberof GenesisBlock
     */
    'timestamp': string;
    /**
     * transactions that are included in this block
     * @type {Array<DidIdTransactionDto>}
     * @memberof GenesisBlock
     */
    'transactions': Array<DidIdTransactionDto>;
    /**
     * version of this block
     * @type {number}
     * @memberof GenesisBlock
     */
    'version': number;
    /**
     * signatures of the validators that accepted the block
     * @type {Array<SignatureDto>}
     * @memberof GenesisBlock
     */
    'signatures': Array<SignatureDto>;
    /**
     * validator that proposed the block
     * @type {SignatureDto}
     * @memberof GenesisBlock
     */
    'proposer': SignatureDto;
}
/**
 * 
 * @export
 * @interface HashDocResponse
 */
export interface HashDocResponse {
    /**
     * parsed did document
     * @type {DidHashDocument}
     * @memberof HashDocResponse
     */
    'document': DidHashDocument;
    /**
     * signatures of the parsed document
     * @type {SignatureInfo}
     * @memberof HashDocResponse
     */
    'signatures': SignatureInfo;
    /**
     * Metadata of the document
     * @type {DidDocumentMetaData}
     * @memberof HashDocResponse
     */
    'metaData': DidDocumentMetaData;
}
/**
 * 
 * @export
 * @interface IdDocResponse
 */
export interface IdDocResponse {
    /**
     * parsed did document
     * @type {DidIdDocument}
     * @memberof IdDocResponse
     */
    'document': DidIdDocument;
    /**
     * signatures of the parsed document
     * @type {SignatureInfo}
     * @memberof IdDocResponse
     */
    'signatures': SignatureInfo;
    /**
     * Metadata of the document
     * @type {DidDocumentMetaData}
     * @memberof IdDocResponse
     */
    'metaData': DidDocumentMetaData;
}
/**
 * 
 * @export
 * @interface InviteNode
 */
export interface InviteNode {
    /**
     * id of the did
     * @type {string}
     * @memberof InviteNode
     */
    'id': string;
    /**
     * Secret token
     * @type {string}
     * @memberof InviteNode
     */
    'secret': string;
    /**
     * Url of the node endpoint
     * @type {string}
     * @memberof InviteNode
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface Key
 */
export interface Key {
    /**
     * 
     * @type {string}
     * @memberof Key
     */
    'id': string;
    /**
     * 
     * @type {PublicKeyJwkDto}
     * @memberof Key
     */
    'publicKeyJwk': PublicKeyJwkDto;
    /**
     * 
     * @type {string}
     * @memberof Key
     */
    'controller': string;
    /**
     * 
     * @type {string}
     * @memberof Key
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface PublicKeyJwkDto
 */
export interface PublicKeyJwkDto {
    /**
     * How the key was meant to be used
     * @type {Array<string>}
     * @memberof PublicKeyJwkDto
     */
    'key_ops'?: Array<string>;
    /**
     * The family of cryptographic algorithms used with the key.
     * @type {string}
     * @memberof PublicKeyJwkDto
     */
    'kty'?: string;
    /**
     * The modulus for the RSA public key.
     * @type {string}
     * @memberof PublicKeyJwkDto
     */
    'n'?: string;
    /**
     * The exponent for the RSA public key.
     * @type {string}
     * @memberof PublicKeyJwkDto
     */
    'e'?: string;
    /**
     * The specific cryptographic algorithm used with the key.
     * @type {string}
     * @memberof PublicKeyJwkDto
     */
    'alg'?: string;
}
/**
 * 
 * @export
 * @interface RoleManage
 */
export interface RoleManage {
    /**
     * roles that should be added to the did
     * @type {Array<RoleManageType>}
     * @memberof RoleManage
     */
    'add'?: Array<RoleManageType>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoleManage
     */
    'remove'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum RoleManageType {
    Validator = 'Validator',
    Gateway = 'Gateway',
    Observer = 'Observer',
    Client = 'Client'
}

/**
 * 
 * @export
 * @interface SchemaDocResponse
 */
export interface SchemaDocResponse {
    /**
     * parsed did document
     * @type {DidSchemaDocument}
     * @memberof SchemaDocResponse
     */
    'document': DidSchemaDocument;
    /**
     * signatures of the parsed document
     * @type {SignatureInfo}
     * @memberof SchemaDocResponse
     */
    'signatures': SignatureInfo;
    /**
     * Metadata of the document
     * @type {DidDocumentMetaData}
     * @memberof SchemaDocResponse
     */
    'metaData': DidDocumentMetaData;
}
/**
 * 
 * @export
 * @interface Service
 */
export interface Service {
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    'endpoint': string;
}
/**
 * 
 * @export
 * @interface ServiceMange
 */
export interface ServiceMange {
    /**
     * List of services that should be added to the did document.
     * @type {Array<DidService>}
     * @memberof ServiceMange
     */
    'add'?: Array<DidService>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceMange
     */
    'remove'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SignatureDto
 */
export interface SignatureDto {
    /**
     * Identifier of the issuer and the used key
     * @type {string}
     * @memberof SignatureDto
     */
    'identifier': string;
    /**
     * The actual signature as a hex encoded string.
     * @type {string}
     * @memberof SignatureDto
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface SignatureInfo
 */
export interface SignatureInfo {
    /**
     * 
     * @type {SignatureType}
     * @memberof SignatureInfo
     */
    'type': SignatureType;
    /**
     * signature of the document values
     * @type {Array<SignatureDto>}
     * @memberof SignatureInfo
     */
    'values': Array<SignatureDto>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum SignatureType {
    Single = 'Single',
    Multi = 'Multi'
}

/**
 * 
 * @export
 * @interface TemplateDocResponse
 */
export interface TemplateDocResponse {
    /**
     * parsed did document
     * @type {DidTemplateDocument}
     * @memberof TemplateDocResponse
     */
    'document': DidTemplateDocument;
    /**
     * signatures of the parsed document
     * @type {SignatureInfo}
     * @memberof TemplateDocResponse
     */
    'signatures': SignatureInfo;
    /**
     * Metadata of the document
     * @type {DidDocumentMetaData}
     * @memberof TemplateDocResponse
     */
    'metaData': DidDocumentMetaData;
}
/**
 * 
 * @export
 * @interface TransactionMetadata
 */
export interface TransactionMetadata {
    /**
     * Version number of the metadata.
     * @type {number}
     * @memberof TransactionMetadata
     */
    'version': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum TransactionType {
    Hash = 'Hash',
    Did = 'Did',
    Schema = 'Schema',
    Template = 'Template'
}

/**
 * 
 * @export
 * @interface VerificationMethod
 */
export interface VerificationMethod {
    /**
     * List of public keys that should be added to the did document.
     * @type {Array<DidPublicKey>}
     * @memberof VerificationMethod
     */
    'add'?: Array<DidPublicKey>;
    /**
     * 
     * @type {Array<string>}
     * @memberof VerificationMethod
     */
    'remove'?: Array<string>;
}
/**
 * 
 * @export
 * @interface VerificationRelation
 */
export interface VerificationRelation {
    /**
     * 
     * @type {object}
     * @memberof VerificationRelation
     */
    'method': object;
    /**
     * 
     * @type {Array<string>}
     * @memberof VerificationRelation
     */
    'keyIds': Array<string>;
}
/**
 * 
 * @export
 * @interface VerificationRelationshipManage
 */
export interface VerificationRelationshipManage {
    /**
     * id that should be removed from the list
     * @type {Array<string>}
     * @memberof VerificationRelationshipManage
     */
    'add'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof VerificationRelationshipManage
     */
    'remove'?: Array<string>;
}

/**
 * DefaultObserverApi - axios parameter creator
 * @export
 */
export const DefaultObserverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prometheusControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultObserverApi - functional programming interface
 * @export
 */
export const DefaultObserverApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultObserverApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prometheusControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prometheusControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultObserverApi - factory interface
 * @export
 */
export const DefaultObserverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultObserverApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prometheusControllerIndex(options?: any): AxiosPromise<void> {
            return localVarFp.prometheusControllerIndex(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultObserverApi - object-oriented interface
 * @export
 * @class DefaultObserverApi
 * @extends {BaseAPI}
 */
export class DefaultObserverApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultObserverApi
     */
    public prometheusControllerIndex(options?: AxiosRequestConfig) {
        return DefaultObserverApiFp(this.configuration).prometheusControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DidObserverApi - axios parameter creator
 * @export
 */
export const DidObserverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the genesis block to build the chain of trust
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerDidControllerGenesis: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/did/genesis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.161Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerDidControllerGetDoc: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerDidControllerGetDoc', 'id', id)
            const localVarPath = `/did/{id}/doc`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.160Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerDidControllerGetTransactions: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerDidControllerGetTransactions', 'id', id)
            const localVarPath = `/did/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.162Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerDidControllerMetaData: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerDidControllerMetaData', 'id', id)
            const localVarPath = `/did/{id}/metadata`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DidObserverApi - functional programming interface
 * @export
 */
export const DidObserverApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DidObserverApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the genesis block to build the chain of trust
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerDidControllerGenesis(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenesisBlock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerDidControllerGenesis(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.161Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerDidControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdDocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerDidControllerGetDoc(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.160Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerDidControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DidIdTransaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerDidControllerGetTransactions(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.162Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerDidControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DidDocumentMetaData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerDidControllerMetaData(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DidObserverApi - factory interface
 * @export
 */
export const DidObserverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DidObserverApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the genesis block to build the chain of trust
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerDidControllerGenesis(options?: any): AxiosPromise<GenesisBlock> {
            return localVarFp.observerDidControllerGenesis(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.161Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerDidControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<IdDocResponse> {
            return localVarFp.observerDidControllerGetDoc(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.160Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerDidControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<Array<DidIdTransaction>> {
            return localVarFp.observerDidControllerGetTransactions(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.162Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerDidControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<DidDocumentMetaData> {
            return localVarFp.observerDidControllerMetaData(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DidObserverApi - object-oriented interface
 * @export
 * @class DidObserverApi
 * @extends {BaseAPI}
 */
export class DidObserverApi extends BaseAPI {
    /**
     * 
     * @summary Returns the genesis block to build the chain of trust
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidObserverApi
     */
    public observerDidControllerGenesis(options?: AxiosRequestConfig) {
        return DidObserverApiFp(this.configuration).observerDidControllerGenesis(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns the did document to a did.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.161Z
     * @param {number} [versionId] return the did document with this version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidObserverApi
     */
    public observerDidControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return DidObserverApiFp(this.configuration).observerDidControllerGetDoc(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns the transaction to assemble a did document.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.160Z
     * @param {number} [versionId] only request transactions that belong to reach the version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidObserverApi
     */
    public observerDidControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return DidObserverApiFp(this.configuration).observerDidControllerGetTransactions(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns the did document metadata to a did.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.162Z
     * @param {number} [versionId] only request transactions that belong to reach the version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidObserverApi
     */
    public observerDidControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return DidObserverApiFp(this.configuration).observerDidControllerMetaData(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HashObserverApi - axios parameter creator
 * @export
 */
export const HashObserverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.172Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerHashControllerGetDoc: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerHashControllerGetDoc', 'id', id)
            const localVarPath = `/hash/{id}/doc`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.172Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerHashControllerGetTransactions: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerHashControllerGetTransactions', 'id', id)
            const localVarPath = `/hash/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.172Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerHashControllerMetaData: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerHashControllerMetaData', 'id', id)
            const localVarPath = `/hash/{id}/metadata`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HashObserverApi - functional programming interface
 * @export
 */
export const HashObserverApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HashObserverApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.172Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerHashControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HashDocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerHashControllerGetDoc(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.172Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerHashControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DidHashTransaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerHashControllerGetTransactions(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.172Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerHashControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DidDocumentMetaData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerHashControllerMetaData(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HashObserverApi - factory interface
 * @export
 */
export const HashObserverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HashObserverApiFp(configuration)
    return {
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.172Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerHashControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<HashDocResponse> {
            return localVarFp.observerHashControllerGetDoc(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.172Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerHashControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<Array<DidHashTransaction>> {
            return localVarFp.observerHashControllerGetTransactions(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.172Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerHashControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<DidDocumentMetaData> {
            return localVarFp.observerHashControllerMetaData(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HashObserverApi - object-oriented interface
 * @export
 * @class HashObserverApi
 * @extends {BaseAPI}
 */
export class HashObserverApi extends BaseAPI {
    /**
     * 
     * @summary returns the did document to a did.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.172Z
     * @param {number} [versionId] return the did document with this version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashObserverApi
     */
    public observerHashControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return HashObserverApiFp(this.configuration).observerHashControllerGetDoc(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns the transaction to assemble a did document.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.172Z
     * @param {number} [versionId] only request transactions that belong to reach the version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashObserverApi
     */
    public observerHashControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return HashObserverApiFp(this.configuration).observerHashControllerGetTransactions(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns the did document metadata to a did.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.172Z
     * @param {number} [versionId] only request transactions that belong to reach the version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashObserverApi
     */
    public observerHashControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return HashObserverApiFp(this.configuration).observerHashControllerMetaData(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NodeObserverApi - axios parameter creator
 * @export
 */
export const NodeObserverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the type of the node and the service that was exposed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpObserverControllerInformation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pass an invite code to init this node.
         * @param {InviteNode} inviteNode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpObserverControllerInit: async (inviteNode: InviteNode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteNode' is not null or undefined
            assertParamExists('httpObserverControllerInit', 'inviteNode', inviteNode)
            const localVarPath = `/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteNode, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rebuilds the pki and hash database based on the local blockchain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpObserverControllerRebuild: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rebuild`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resets the node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpObserverControllerReset: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeObserverApi - functional programming interface
 * @export
 */
export const NodeObserverApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeObserverApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the type of the node and the service that was exposed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async httpObserverControllerInformation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.httpObserverControllerInformation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pass an invite code to init this node.
         * @param {InviteNode} inviteNode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async httpObserverControllerInit(inviteNode: InviteNode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.httpObserverControllerInit(inviteNode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rebuilds the pki and hash database based on the local blockchain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async httpObserverControllerRebuild(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.httpObserverControllerRebuild(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resets the node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async httpObserverControllerReset(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.httpObserverControllerReset(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NodeObserverApi - factory interface
 * @export
 */
export const NodeObserverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeObserverApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the type of the node and the service that was exposed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpObserverControllerInformation(options?: any): AxiosPromise<void> {
            return localVarFp.httpObserverControllerInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pass an invite code to init this node.
         * @param {InviteNode} inviteNode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpObserverControllerInit(inviteNode: InviteNode, options?: any): AxiosPromise<void> {
            return localVarFp.httpObserverControllerInit(inviteNode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rebuilds the pki and hash database based on the local blockchain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpObserverControllerRebuild(options?: any): AxiosPromise<void> {
            return localVarFp.httpObserverControllerRebuild(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resets the node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpObserverControllerReset(options?: any): AxiosPromise<void> {
            return localVarFp.httpObserverControllerReset(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodeObserverApi - object-oriented interface
 * @export
 * @class NodeObserverApi
 * @extends {BaseAPI}
 */
export class NodeObserverApi extends BaseAPI {
    /**
     * 
     * @summary Returns the type of the node and the service that was exposed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeObserverApi
     */
    public httpObserverControllerInformation(options?: AxiosRequestConfig) {
        return NodeObserverApiFp(this.configuration).httpObserverControllerInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pass an invite code to init this node.
     * @param {InviteNode} inviteNode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeObserverApi
     */
    public httpObserverControllerInit(inviteNode: InviteNode, options?: AxiosRequestConfig) {
        return NodeObserverApiFp(this.configuration).httpObserverControllerInit(inviteNode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rebuilds the pki and hash database based on the local blockchain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeObserverApi
     */
    public httpObserverControllerRebuild(options?: AxiosRequestConfig) {
        return NodeObserverApiFp(this.configuration).httpObserverControllerRebuild(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resets the node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeObserverApi
     */
    public httpObserverControllerReset(options?: AxiosRequestConfig) {
        return NodeObserverApiFp(this.configuration).httpObserverControllerReset(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchemaObserverApi - axios parameter creator
 * @export
 */
export const SchemaObserverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.191Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerSchemaControllerGetDoc: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerSchemaControllerGetDoc', 'id', id)
            const localVarPath = `/schema/{id}/doc`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.191Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerSchemaControllerGetTransactions: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerSchemaControllerGetTransactions', 'id', id)
            const localVarPath = `/schema/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.192Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerSchemaControllerMetaData: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerSchemaControllerMetaData', 'id', id)
            const localVarPath = `/schema/{id}/metadata`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaObserverApi - functional programming interface
 * @export
 */
export const SchemaObserverApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaObserverApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.191Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerSchemaControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaDocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerSchemaControllerGetDoc(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.191Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerSchemaControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DidSchemaTransaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerSchemaControllerGetTransactions(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.192Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerSchemaControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DidDocumentMetaData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerSchemaControllerMetaData(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchemaObserverApi - factory interface
 * @export
 */
export const SchemaObserverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaObserverApiFp(configuration)
    return {
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.191Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerSchemaControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<SchemaDocResponse> {
            return localVarFp.observerSchemaControllerGetDoc(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.191Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerSchemaControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<Array<DidSchemaTransaction>> {
            return localVarFp.observerSchemaControllerGetTransactions(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.192Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerSchemaControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<DidDocumentMetaData> {
            return localVarFp.observerSchemaControllerMetaData(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemaObserverApi - object-oriented interface
 * @export
 * @class SchemaObserverApi
 * @extends {BaseAPI}
 */
export class SchemaObserverApi extends BaseAPI {
    /**
     * 
     * @summary returns the did document to a did.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.191Z
     * @param {number} [versionId] return the did document with this version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaObserverApi
     */
    public observerSchemaControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return SchemaObserverApiFp(this.configuration).observerSchemaControllerGetDoc(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns the transaction to assemble a did document.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.191Z
     * @param {number} [versionId] only request transactions that belong to reach the version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaObserverApi
     */
    public observerSchemaControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return SchemaObserverApiFp(this.configuration).observerSchemaControllerGetTransactions(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns the did document metadata to a did.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.192Z
     * @param {number} [versionId] only request transactions that belong to reach the version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaObserverApi
     */
    public observerSchemaControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return SchemaObserverApiFp(this.configuration).observerSchemaControllerMetaData(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TemplateObserverApi - axios parameter creator
 * @export
 */
export const TemplateObserverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.202Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerTemplateControllerGetDoc: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerTemplateControllerGetDoc', 'id', id)
            const localVarPath = `/template/{id}/doc`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.202Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerTemplateControllerGetTransactions: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerTemplateControllerGetTransactions', 'id', id)
            const localVarPath = `/template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.202Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerTemplateControllerMetaData: async (id: string, versionTime?: string, versionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('observerTemplateControllerMetaData', 'id', id)
            const localVarPath = `/template/{id}/metadata`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionTime !== undefined) {
                localVarQueryParameter['versionTime'] = versionTime;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateObserverApi - functional programming interface
 * @export
 */
export const TemplateObserverApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateObserverApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.202Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerTemplateControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateDocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerTemplateControllerGetDoc(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.202Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerTemplateControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DidTemplateTransaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerTemplateControllerGetTransactions(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.202Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async observerTemplateControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DidDocumentMetaData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.observerTemplateControllerMetaData(id, versionTime, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateObserverApi - factory interface
 * @export
 */
export const TemplateObserverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateObserverApiFp(configuration)
    return {
        /**
         * 
         * @summary returns the did document to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.202Z
         * @param {number} [versionId] return the did document with this version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerTemplateControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<TemplateDocResponse> {
            return localVarFp.observerTemplateControllerGetDoc(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns the transaction to assemble a did document.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.202Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerTemplateControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<Array<DidTemplateTransaction>> {
            return localVarFp.observerTemplateControllerGetTransactions(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns the did document metadata to a did.
         * @param {string} id identifier of the did.
         * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.202Z
         * @param {number} [versionId] only request transactions that belong to reach the version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observerTemplateControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: any): AxiosPromise<DidDocumentMetaData> {
            return localVarFp.observerTemplateControllerMetaData(id, versionTime, versionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplateObserverApi - object-oriented interface
 * @export
 * @class TemplateObserverApi
 * @extends {BaseAPI}
 */
export class TemplateObserverApi extends BaseAPI {
    /**
     * 
     * @summary returns the did document to a did.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] return the did document that was present to 2022-03-02T12:17:47.202Z
     * @param {number} [versionId] return the did document with this version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateObserverApi
     */
    public observerTemplateControllerGetDoc(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return TemplateObserverApiFp(this.configuration).observerTemplateControllerGetDoc(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns the transaction to assemble a did document.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] only request transactions that are less than the given timestamp like 2022-03-02T12:17:47.202Z
     * @param {number} [versionId] only request transactions that belong to reach the version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateObserverApi
     */
    public observerTemplateControllerGetTransactions(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return TemplateObserverApiFp(this.configuration).observerTemplateControllerGetTransactions(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns the did document metadata to a did.
     * @param {string} id identifier of the did.
     * @param {string} [versionTime] only request transactions that are less than the given timestamp 2022-03-02T12:17:47.202Z
     * @param {number} [versionId] only request transactions that belong to reach the version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateObserverApi
     */
    public observerTemplateControllerMetaData(id: string, versionTime?: string, versionId?: number, options?: AxiosRequestConfig) {
        return TemplateObserverApiFp(this.configuration).observerTemplateControllerMetaData(id, versionTime, versionId, options).then((request) => request(this.axios, this.basePath));
    }
}


